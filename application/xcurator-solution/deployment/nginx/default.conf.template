
server {
  listen      80;
  server_name ${HOST_AP};

    # IDPs require buffers larger than default

    # Otherwise: 502, upstream sent too big header while reading response header from upstream
    # https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_buffer_size
    # Default: proxy_buffer_size 4k|8k;
    #proxy_buffer_size   8k; - for performance optimization, configured only for necessary locations (/ and /keycloak/)

    # Otherwise: 400, Request Header or Cookie Too Large
    # https://nginx.org/en/docs/http/ngx_http_core_module.html#large_client_header_buffers
    # Default: large_client_header_buffers 4 8k;
    large_client_header_buffers 4 16k;

  location / {
    auth_basic off;
    proxy_pass http://xcurator-web-ap:3000/;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    # On staging 2 proxies are present, where internal one works via HTTP: Browser > HTTPS:proxy > HTTP:proxy >> HTTP:apps
    # In this, last in line proxy, if X-Forwarded-Proto = $scheme, then "http" is being sent, which breaks "express-session" implicit logic, see https://stackoverflow.com/a/30803170/9993205
    proxy_set_header X-Forwarded-Proto ${HTTP_SCHEME};
    proxy_pass_request_headers on;

    proxy_buffer_size   8k;
  }

  # Reverse proxy to combine web frontend and API under same host to prevent CORS errors
  # Expose only frontend to the internet. Hide all backends within.
  location /api-gateway/ {
    proxy_pass http://gateway:8080/;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto ${HTTP_SCHEME};
    proxy_pass_request_headers on;

    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $http_connection;
  }

  location /keycloak/ {
    proxy_pass http://keycloak:8080/keycloak/;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto ${HTTP_SCHEME};
    proxy_pass_request_headers on;

    proxy_buffer_size   8k;
  }
}

server {
  listen      80;
  server_name ${HOST_BLM};

  location / {
    auth_basic off;
    proxy_pass http://xcurator-web-blm:3000/;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto ${HTTP_SCHEME};
    proxy_pass_request_headers on;

    proxy_buffer_size   8k;
  }

  # Reverse proxy to combine web frontend and API under same host to prevent CORS errors
  # Expose only frontend to the internet. Hide all backends within.
  location /api-gateway/ {
    proxy_pass http://gateway:8080/;
    proxy_set_header X-Forwarded-Host $host;
    proxy_set_header X-Forwarded-Server $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto ${HTTP_SCHEME};
    proxy_pass_request_headers on;

    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $http_connection;
  }
}

server {
  listen      80;
  # this host MUST NOT be configured on production
  server_name ${HOST_ADMIN};

  auth_basic           "Administrator's area";
  auth_basic_user_file /etc/nginx/.htpasswd;

  # Optionally available
  location /kibana/ {
    proxy_pass http://kibana:5601/kibana/;
    proxy_set_header Authorization "";
  }
  location /mongo-express/ {
    proxy_pass http://mongo-express:8081/mongo-express/;
  }
  location /redis-commander/ {
    proxy_pass http://redis-commander:8081/;
  }
  location /pgweb/ {
    proxy_pass http://pgweb:8081/;
  }
  location /monstache/ {
    proxy_pass http://monstache:8080/;
  }
  location /logs/ {
    proxy_pass http://dozzle:8080/logs/;
  }
}