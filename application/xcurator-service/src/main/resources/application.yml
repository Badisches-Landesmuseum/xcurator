server:
  port: 8080

spring:
  application:
    name: @name@
    version: @version@
    description: xCurator Backend Service. Manage Stories, View Artefacts and request awesome searches.
  security:
    client-id: @name@
  cache:
    cache-names: wikidata, wikipedia, randomQuery, search-cluster
    caffeine:
      spec: maximumSize=2000,expireAfterAccess=24h
    type: caffeine
  data:
    mongodb:
      uri: mongodb://${MONGO_USERNAME:xcurator_mongo_user}:${MONGO_PASSWORD:xcurator_mongo_password}@${MONGO_HOST:localhost}:${MONGO_PORT:27017}/${MONGO_DATABASE:xcurator}
      auto-index-creation: false
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6379}
      password: ${REDIS_PASSWORD:password}
      namespace: ${REDIS_NAMESPACE:sess}
  elasticsearch:
    uris: ${ELASTICSEARCH_URL:http://localhost:9200}
    username: ${ELASTICSEARCH_USERNAME:elastic}
    password: ${ELASTICSEARCH_PASSWORD:elastic}

search:
  vector:
    min-score: ${XCURATOR_VECTOR_MIN_SCORE:1.17}

clip-http:
  url: ${CLIP_HTTP_URL:http://localhost:8088/text/embedding}

openai:
  api-key: ${OPENAI_API_KEY}
  model: ${OPENAI_MODEL:gpt-3.5-turbo-16k-0613}

### Kubernetes Health ###
management:
  endpoint:
    health:
      enabled: true
  endpoints:
    enabled-by-default: true
    web:
      cors:
        allowed-origins: "*"
        allowed-methods: GET, POST
      base-path: /manage
      exposure:
        include: [ "health"]
